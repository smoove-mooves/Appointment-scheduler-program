package controller;

import DAO.AppointmentsConnection;
import DAO.ContactsConnection;
import DAO.UsersConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.*;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.time.*;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;

import static DAO.CustomersConnection.getAllCustomerIds;
import static javafx.fxml.FXMLLoader.load;

/** This class is the controller for adding new appointments */

public class addAppointmentScreenController implements Initializable {

    Stage stage;
    Parent scene;

    @FXML
    private ComboBox<Contacts> addAppointmentContact;

    @FXML
    private ComboBox<Integer> addAppointmentCustomerID;

    @FXML
    private TextField addAppointmentDescriptionTxt;

    @FXML
    private DatePicker addAppointmentEndDate;

    @FXML
    private ComboBox<LocalTime> addAppointmentEndTime;

    @FXML
    private TextField addAppointmentLocationTxt;

    @FXML
    private DatePicker addAppointmentStartDate;

    @FXML
    private ComboBox<LocalTime> addAppointmentStartTime;

    @FXML
    private TextField addAppointmentTitleTxt;

    @FXML
    private TextField addAppointmentTypeTxt;

    @FXML
    private ComboBox<Integer> addAppointmentUserID;

    /** This method cancels the appointment creation process and brings the user back to the appointments screen */

    @FXML
    void onActionCancelAddedAppointment(ActionEvent event) throws IOException {

        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method adds the appointment that the user makes into the database and the appointments tableview */

    @FXML
    void onActionSaveAppointment(ActionEvent event) throws IOException, SQLException {
        ObservableList<Appointments> allApps = FXCollections.observableArrayList();
        allApps = AppointmentsConnection.getAllAppointments();

        String appointmentTitle = addAppointmentTitleTxt.getText();
        String appointmentType = addAppointmentTypeTxt.getText();
        String appointmentDescription = addAppointmentDescriptionTxt.getText();
        String appointmentLocation = addAppointmentLocationTxt.getText();
        LocalDate startDate = addAppointmentStartDate.getValue();
        LocalTime startTime = addAppointmentStartTime.getValue();
        LocalDate endDate = addAppointmentEndDate.getValue();
        LocalTime endTime = addAppointmentEndTime.getValue();
        int customerId = addAppointmentCustomerID.getSelectionModel().getSelectedItem();
        int userId = addAppointmentUserID.getSelectionModel().getSelectedItem();
        int contactId = Integer.parseInt(String.valueOf(addAppointmentContact.getSelectionModel().getSelectedItem().getContactId()));

        /** This section of code(111-155) performs logical error checks to ensure that the new appointment is scheduled during business hours and does not overlap other appointments */

        LocalDateTime startDateTime = LocalDateTime.of(startDate, startTime);
        LocalDateTime endDateTime = LocalDateTime.of(endDate, endTime);

        for(Appointments oldApp : allApps){
            int oldAppCustomerId = oldApp.getCustomerId();

            if(oldAppCustomerId == customerId) {

                LocalDateTime oldAppStart = oldApp.getStart();
                LocalDateTime oldAppEnd = oldApp.getEnd();
                String appStartDate = String.valueOf((startDateTime.toLocalDate().getDayOfWeek()));

                if(appStartDate == "SATURDAY" || appStartDate == "SUNDAY"){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment is scheduled for the weekend. Our business does not operate during the weekend. Please select a different day.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;
                }

                if ((startDateTime.isAfter(oldAppStart) || startDateTime.isEqual(oldAppStart)) && (startDateTime.isBefore(oldAppEnd) || startDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment starts during one of your other appointments. Please select a different start time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }

                if ((endDateTime.isAfter(oldAppStart)) && (endDateTime.isBefore(oldAppEnd) || endDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment ends during one of your other appointments.Please select a different end time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }

                if ((startDateTime.isBefore(oldAppStart) || startDateTime.isEqual(oldAppStart)) && (endDateTime.isAfter(oldAppEnd) || endDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment duration completely overlaps one of your other appointments. Please select a different start and end time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }
            }
        }

        int rowsAffected = AppointmentsConnection.insertAppointment(0, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType,
                startDateTime , endDateTime, customerId, userId, contactId);

        if(rowsAffected > 0){
            System.out.println("Appointment added successfully");
        }

        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method initializes the add-appointment screen */

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle){
        ObservableList<LocalTime> appointmentStartTimes = FXCollections.observableArrayList();
        ObservableList<LocalTime> appointmentEndTimes = FXCollections.observableArrayList();

        try {

            addAppointmentUserID.setItems(UsersConnection.getAllUserIds());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            addAppointmentCustomerID.setItems(getAllCustomerIds());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {

            addAppointmentContact.setItems(ContactsConnection.getAllContacts());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        /** This section of code(198-280) determines the user's ZoneId and sets start/end time combo-boxes to times that the business is open in their timezone*/

        ZoneId userZone = ZoneId.systemDefault();

        if(Objects.equals(String.valueOf(userZone), "America/New_York")) {
        LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(8, 0));
        LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(21, 45));
        LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(8, 15));
        LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(22, 0));

        while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
            appointmentStartTimes.add(firstStartTime.toLocalTime());
            firstStartTime = firstStartTime.plusMinutes(15);
        }

        while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
            appointmentEndTimes.add(firstEndTime.toLocalTime());
            firstEndTime = firstEndTime.plusMinutes(15);
        }

        addAppointmentStartTime.setItems(appointmentStartTimes);
        addAppointmentEndTime.setItems(appointmentEndTimes);
    }

        if(Objects.equals(String.valueOf(userZone), "America/Los_Angeles")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(5, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(18, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(5, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(18, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                appointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                appointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            addAppointmentStartTime.setItems(appointmentStartTimes);
            addAppointmentEndTime.setItems(appointmentEndTimes);
        }

        if(Objects.equals(String.valueOf(userZone), "America/Denver")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(6, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(19, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(6, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(19, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                appointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                appointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            addAppointmentStartTime.setItems(appointmentStartTimes);
            addAppointmentEndTime.setItems(appointmentEndTimes);
        }

        if(Objects.equals(String.valueOf(userZone), "America/Chicago")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(7, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(20, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(7, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(),LocalTime.of(20, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                appointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                appointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            addAppointmentStartTime.setItems(appointmentStartTimes);
            addAppointmentEndTime.setItems(appointmentEndTimes);
        }

    }

}
