package main;

import DAO.AppointmentsConnection;
import DAO.UsersConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.Appointments;
import model.Users;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;

import java.sql.SQLException;
import java.sql.Timestamp;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Locale;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;


import static javafx.fxml.FXMLLoader.load;

/** This class is the controller for the loginScreen */

public class MainController implements Initializable {

    Stage stage;
    Parent scene;

    @FXML
    private Button loginExitBtn;

    @FXML
    private TextField loginPasswordTxt;

    @FXML
    private Button loginSubmitBtn;

    @FXML
    private TextArea loginTimeZoneTxt;

    @FXML
    private TextField loginUserNameTxt;

    @FXML
    private Label locationLbl;

    @FXML
    private Label userNameLbl;

    @FXML
    private Label pwLbl;

    @FXML
    private Label welcomeLbl;

    /** This method allows the user to exit the program from the login screen */

    @FXML
    void onActionExitProgram(ActionEvent event) {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to exit this amazing program?");

        Optional<ButtonType> result = alert.showAndWait();

        if ((result.isPresent()) && result.get() == ButtonType.OK) {

            System.exit(0);

        }

    }

    /** This method submits a user's login attempt */

    @FXML
    void onActionSubmitLogin(ActionEvent event) throws IOException, SQLException {
        Locale locale = Locale.getDefault();
        Locale.setDefault(locale);
        ObservableList<Users> allUsers = FXCollections.observableArrayList();
        allUsers = UsersConnection.getAllUsers();

        String fileName = "src/login_activity.txt";
        FileWriter loginActivity = new FileWriter(fileName, true);
        PrintWriter outputFile = new PrintWriter(loginActivity);

        String userNameEntry = loginUserNameTxt.getText();
        String passwordEntry = loginPasswordTxt.getText();
        int num = 0;
        loginInterface nums = c -> c + 1;
        if((Objects.equals(String.valueOf(locale), "en_US"))) {
            for (Users userNamePwCombo : allUsers) {
                String un = userNamePwCombo.getUserName();
                String pw = userNamePwCombo.getUserPassword();

                if ((Objects.equals(userNameEntry, un)) && (Objects.equals(passwordEntry, pw))) {
                    outputFile.println(userNameEntry + " successfully logged in on: " + Timestamp.valueOf(LocalDateTime.now()) + "\n");
                    outputFile.close();
                    num = nums.incrementNum(num);
                    if (num > 0) {
                        ObservableList<Appointments> everyAppointmentsList = FXCollections.observableArrayList();
                        everyAppointmentsList = AppointmentsConnection.getAllAppointments();

                        LocalDateTime currentDayTime = LocalDateTime.now();
                        int upcoming = 0;

                        for (Appointments app : everyAppointmentsList) {
                            LocalDateTime appStart = app.getStart();

                            if (appStart.isAfter(currentDayTime) && appStart.isBefore(currentDayTime.plusMinutes(15))) {
                                upcoming = upcoming + 1;
                                int appID = app.getAppointmentId();
                                LocalTime appTime = appStart.toLocalTime();
                                String appDay = String.valueOf(appStart.toLocalDate());
                                if (upcoming > 0) {
                                    Alert alert1 = new Alert(Alert.AlertType.CONFIRMATION, "Appointment with ID: " + appID +" is coming up and scheduled for " + appDay + " at " + appTime);

                                    Optional<ButtonType> result = alert1.showAndWait();
                                }
                            }
                        }

                        if (upcoming == 0) {
                            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "There are currently no upcoming appointments.");

                            Optional<ButtonType> result = alert.showAndWait();
                        }

                        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
                        stage.setScene(new Scene(scene));
                        stage.show();
                    }
                }
            }
            if (num == 0) {
                outputFile.println(userNameEntry + " attempted to login on: " + Timestamp.valueOf(LocalDateTime.now()) + " ,but failed." + "\n");
                outputFile.close();
                Alert alert2 = new Alert(Alert.AlertType.ERROR, "Incorrect credentials. Please try a different username or password.");

                Optional<ButtonType> result = alert2.showAndWait();
                return;

            }
        }

        if((Objects.equals(String.valueOf(locale), "fr_FR"))){
        for (Users userNamePwCombo : allUsers) {
            String un = userNamePwCombo.getUserName();
            String pw = userNamePwCombo.getUserPassword();

            if ((Objects.equals(userNameEntry, un)) && (Objects.equals(passwordEntry, pw))) {
                outputFile.println(userNameEntry + " successfully logged in on: " + Timestamp.valueOf(LocalDateTime.now()) + "\n");
                outputFile.close();
                ++num;
                if (num > 0) {
                    ObservableList<Appointments> everyAppointmentsList = FXCollections.observableArrayList();
                    everyAppointmentsList = AppointmentsConnection.getAllAppointments();

                    LocalDateTime currentDayTime = LocalDateTime.now();
                    int upcoming = 0;

                    for (Appointments app : everyAppointmentsList) {
                        LocalDateTime appStart = app.getStart();
                        if (appStart.isAfter(currentDayTime) && appStart.isBefore(currentDayTime.plusMinutes(15))) {
                            upcoming = upcoming + 1;
                            int appID = app.getAppointmentId();
                            LocalTime appTime = appStart.toLocalTime();
                            String appDay = String.valueOf(appStart.toLocalDate());
                            if (upcoming > 0 && (Objects.equals(String.valueOf(locale), "fr_FR"))) {
                                Alert alert1 = new Alert(Alert.AlertType.CONFIRMATION, "Rendez-vous avec pièce d'identité: " + appID + " Est à venir et prévu pour " + appDay + " \n" +
                                        "à " + appTime);

                                Optional<ButtonType> result = alert1.showAndWait();
                            }
                        }
                    }

                    if (upcoming == 0 && (Objects.equals(String.valueOf(locale), "fr_FR"))) {
                        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Il n’y a actuellement aucun rendez-vous à venir.");

                        Optional<ButtonType> result = alert.showAndWait();
                    }

                    stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                    scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
                    stage.setScene(new Scene(scene));
                    stage.show();
                }
            }
        }
        if (num == 0 && (Objects.equals(String.valueOf(locale), "fr_FR"))) {
            outputFile.println(userNameEntry + " attempted to login on: " + Timestamp.valueOf(LocalDateTime.now()) + " ,but failed." + "\n");
            outputFile.close();
            Alert alert2 = new Alert(Alert.AlertType.ERROR, "Informations d'identification incorrectes. Veuillez essayer un autre nom d'utilisateur ou mot de passe.");

            Optional<ButtonType> result = alert2.showAndWait();
            return;
        }
    }
    }

    /** This method initializes the login screen */

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        Locale locale = Locale.getDefault();
        Locale.setDefault(locale);
        ResourceBundle rb = ResourceBundle.getBundle("language", Locale.US);
        ResourceBundle rb2 = ResourceBundle.getBundle("language", Locale.FRANCE);

        if(Objects.equals(String.valueOf(locale), "fr_FR")) {
            loginSubmitBtn.setText(rb2.getString("Submit"));
            loginExitBtn.setText(rb2.getString("Exit"));
            pwLbl.setText(rb2.getString("Password"));
            userNameLbl.setText(rb2.getString("UserName"));
            locationLbl.setText(rb2.getString("Location"));
            welcomeLbl.setText(rb2.getString("Welcome!"));

        }
        ZoneId userZone = ZoneId.systemDefault();

        loginTimeZoneTxt.setText(String.valueOf(userZone));
    }
}
