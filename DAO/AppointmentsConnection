package DAO;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import model.Appointments;

import java.sql.*;
import java.time.LocalDateTime;
import static helper.JDBC.jdbcUrl;
import static helper.JDBC.userName;
import static helper.JDBC.password;
import static java.sql.DriverManager.getConnection;

/** This class is for all JDBC methods related to the appointments table in MySQL */

public class AppointmentsConnection {

    /** This method gets all appointments from the database */

    public static ObservableList<Appointments> getAllAppointments() throws SQLException{

        ObservableList<Appointments> appointmentsObservableList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM appointments";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()){

            int appointmentID = rs.getInt("Appointment_ID");
            String appointmentTitle = rs.getString("Title");
            String appointmentDescription = rs.getString("Description");
            String appointmentLocation = rs.getString("Location");
            String appointmentType = rs.getString("Type");
            LocalDateTime start = rs.getTimestamp("Start").toLocalDateTime();
            LocalDateTime end = rs.getTimestamp("End").toLocalDateTime();
            int customerID = rs.getInt("Customer_ID");
            int userID = rs.getInt("User_ID");
            int contactID = rs.getInt("Contact_ID");
            Appointments appointment = new Appointments(appointmentID, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType, start, end, customerID, userID, contactID);
            appointmentsObservableList.add(appointment);

        }

        return appointmentsObservableList;

    }

    /** This method returns the different types of appointment types in the database */

    public static ObservableList<String> getAllAppointmentTypes() throws SQLException {

        ObservableList<String> allAppointmentTypesObservableList = FXCollections.observableArrayList();
        String sql = "SELECT DISTINCT Type FROM appointments";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            String appointmentType = rs.getString("Type");
            allAppointmentTypesObservableList.add(appointmentType);
        }

        return allAppointmentTypesObservableList;

    }

    /** This method inserts a new appointment into the database */

    public static int insertAppointment(int appointmentId , String appointmentTitle , String appointmentDescription, String appointmentLocation, String appointmentType ,
                                        LocalDateTime start , LocalDateTime end , int customerId , int userId , int contactId) throws SQLException{

        String sql ="INSERT INTO appointments (Appointment_ID, Title, Description, Location, Type, Start, End, Customer_ID, User_ID, Contact_ID) VALUES (null,?,?,?,?,?,?,?,?,?)";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ps.setString(1, appointmentTitle);
        ps.setString(2, appointmentDescription);
        ps.setString(3, appointmentLocation);
        ps.setString(4, appointmentType);
        ps.setTimestamp(5, Timestamp.valueOf(start));
        ps.setTimestamp(6, Timestamp.valueOf(end));
        ps.setInt(7, customerId);
        ps.setInt(8, userId);
        ps.setInt(9, contactId);
        int rowsAffected = ps.executeUpdate();

        return rowsAffected;

    }

    /** This method updates an appointment in the database */

    public static int updateAppointment(int appointmentId , String appointmentTitle , String appointmentDescription, String appointmentLocation, String appointmentType ,
                                        LocalDateTime start , LocalDateTime end , int customerId , int userId , int contactId) throws SQLException{

        String sql ="UPDATE appointments SET Title = ?, Description = ?, Location = ?, Type = ?, Start = ?, End = ?, Customer_ID = ?, User_ID = ?, Contact_ID = ? WHERE Appointment_ID = ?";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ps.setString(1, appointmentTitle);
        ps.setString(2, appointmentDescription);
        ps.setString(3, appointmentLocation);
        ps.setString(4, appointmentType);
        ps.setTimestamp(5, Timestamp.valueOf(start));
        ps.setTimestamp(6, Timestamp.valueOf(end));
        ps.setInt(7, customerId);
        ps.setInt(8, userId);
        ps.setInt(9, contactId);
        ps.setInt(10, appointmentId);
        int rowsAffected = ps.executeUpdate();

        return rowsAffected;

    }

    /** This method deletes an appointment from the database */

    public static int deleteAppointment(int Appointment_ID) throws SQLException{
        String sql = "DELETE FROM appointments WHERE Appointment_ID=?";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ps.setInt(1, Appointment_ID);
        int rowsAffected = ps.executeUpdate();

        return rowsAffected;

    }

    /** This method gets all of Anika's appointments from the database */

    public static ObservableList<Appointments> getAnikasReports() throws SQLException {
        ObservableList<Appointments> anikasReportsObservableList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM appointments WHERE Contact_ID = '1'";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {

            int appointmentID = rs.getInt("Appointment_ID");
            String appointmentTitle = rs.getString("Title");
            String appointmentDescription = rs.getString("Description");
            String appointmentLocation = rs.getString("Location");
            String appointmentType = rs.getString("Type");
            LocalDateTime start = rs.getTimestamp("Start").toLocalDateTime();
            LocalDateTime end = rs.getTimestamp("End").toLocalDateTime();
            int customerID = rs.getInt("Customer_ID");
            int userID = rs.getInt("User_ID");
            int contactID = rs.getInt("Contact_ID");
            Appointments appointment = new Appointments(appointmentID, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType, start, end, customerID, userID, contactID);
            anikasReportsObservableList.add(appointment);
        }

        return anikasReportsObservableList;

    }

    /** This method gets all of Daniel's appointments from the database */

    public static ObservableList<Appointments> getDanielsReports() throws SQLException {
        ObservableList<Appointments> danielsReportsObservableList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM appointments WHERE Contact_ID = '2'";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {

            int appointmentID = rs.getInt("Appointment_ID");
            String appointmentTitle = rs.getString("Title");
            String appointmentDescription = rs.getString("Description");
            String appointmentLocation = rs.getString("Location");
            String appointmentType = rs.getString("Type");
            LocalDateTime start = rs.getTimestamp("Start").toLocalDateTime();
            LocalDateTime end = rs.getTimestamp("End").toLocalDateTime();
            int customerID = rs.getInt("Customer_ID");
            int userID = rs.getInt("User_ID");
            int contactID = rs.getInt("Contact_ID");
            Appointments appointment = new Appointments(appointmentID, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType, start, end, customerID, userID, contactID);
            danielsReportsObservableList.add(appointment);
        }

        return danielsReportsObservableList;

    }

    /** This method gets all of Li's appointments from the database */

    public static ObservableList<Appointments> getLisReports() throws SQLException {
        ObservableList<Appointments> lisReportsObservableList = FXCollections.observableArrayList();
        String sql = "SELECT * FROM appointments WHERE Contact_ID = '3'";
        PreparedStatement ps = getConnection(jdbcUrl, userName, password).prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {

            int appointmentID = rs.getInt("Appointment_ID");
            String appointmentTitle = rs.getString("Title");
            String appointmentDescription = rs.getString("Description");
            String appointmentLocation = rs.getString("Location");
            String appointmentType = rs.getString("Type");
            LocalDateTime start = rs.getTimestamp("Start").toLocalDateTime();
            LocalDateTime end = rs.getTimestamp("End").toLocalDateTime();
            int customerID = rs.getInt("Customer_ID");
            int userID = rs.getInt("User_ID");
            int contactID = rs.getInt("Contact_ID");
            Appointments appointment = new Appointments(appointmentID, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType, start, end, customerID, userID, contactID);
            lisReportsObservableList.add(appointment);
        }

        return lisReportsObservableList;

    }

}
