package controller;

import DAO.AppointmentsConnection;
import DAO.ContactsConnection;
import DAO.CustomersConnection;
import DAO.UsersConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.Appointments;
import model.Contacts;
import model.Customers;
import model.Users;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.time.*;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.TimeZone;

import static javafx.fxml.FXMLLoader.load;

/** This class is the controller for modifying an appointment selected by the user */

public class modifyAppointmentScreenController implements Initializable {
    Appointments selectedAppointmentToModify;

    Stage stage;
    Parent scene;

    @FXML
    private ComboBox<Contacts> modifyAppointmentContact;

    @FXML
    private ComboBox<Integer> modifyAppointmentCustomerID;

    @FXML
    private TextField modifyAppointmentDescriptionTxt;

    @FXML
    private DatePicker modifyAppointmentEndDate;

    @FXML
    private ComboBox<LocalTime> modifyAppointmentEndTime;

    @FXML
    private TextField modifyAppointmentIDTxt;

    @FXML
    private TextField modifyAppointmentLocationTxt;

    @FXML
    private DatePicker modifyAppointmentStartDate;

    @FXML
    private ComboBox<LocalTime> modifyAppointmentStartTime;

    @FXML
    private TextField modifyAppointmentTitleTxt;

    @FXML
    private TextField modifyAppointmentTypeTxt;

    @FXML
    private ComboBox<Integer> modifyAppointmentUserID;

    /**
     * This method sends a selected appointment's data to the modify-appointment screen
     */

    public void sendSelectedAppointmentToModify(Appointments selectedAppointmentToModify) throws SQLException {
        this.selectedAppointmentToModify = selectedAppointmentToModify;
        ObservableList<Customers> allCustomersObservableList = FXCollections.observableArrayList();
        ObservableList<Users> allUsersObservableList = FXCollections.observableArrayList();
        ObservableList<Contacts> allContactsObservableList = FXCollections.observableArrayList();

        allCustomersObservableList = CustomersConnection.getAllCustomers();
        allUsersObservableList = UsersConnection.getAllUsers();
        allContactsObservableList = ContactsConnection.getAllContacts();

        //Time zone section start

        LocalDate pacificDate = LocalDate.of((selectedAppointmentToModify.getStart().getYear()), (selectedAppointmentToModify.getStart().getMonth()), (selectedAppointmentToModify.getStart().getDayOfMonth()));
        LocalTime pacificTime = LocalTime.of(selectedAppointmentToModify.getStart().toLocalTime().getHour(), selectedAppointmentToModify.getStart().toLocalTime().getMinute());
        ZoneId pacificZoneId = ZoneId.of("America/Los_Angeles");
        ZonedDateTime pacificZDT = ZonedDateTime.of(pacificDate, pacificTime, pacificZoneId);
        ZoneId localZoneId = ZoneId.of(TimeZone.getDefault().getID());

        Instant pacificToGMTInstant = pacificZDT.toInstant();
        ZonedDateTime pacificToLocalZDT = pacificZDT.withZoneSameInstant(localZoneId);
        ZonedDateTime gmtToLocalZDT = pacificToGMTInstant.atZone(localZoneId);

        System.out.println("Local: " + ZonedDateTime.now());
        System.out.println("Pacific time: " + pacificZDT);
        System.out.println("Pacific time -> GMT: " + pacificToGMTInstant);
        System.out.println("GMT -> Local: " + gmtToLocalZDT);
        System.out.println("GMT -> LocalDate: " + gmtToLocalZDT.toLocalDate());
        System.out.println("GMT -> LocalTime: " + gmtToLocalZDT.toLocalTime());

        String date = String.valueOf(gmtToLocalZDT.toLocalDate());
        String time = String.valueOf(gmtToLocalZDT.toLocalTime());
        String dateTime = date + " " + time;
        System.out.println(dateTime);

        // Time zone section end

        modifyAppointmentIDTxt.setText(String.valueOf(selectedAppointmentToModify.getAppointmentId()));
        modifyAppointmentTitleTxt.setText(String.valueOf(selectedAppointmentToModify.getAppointmentTitle()));
        modifyAppointmentTypeTxt.setText(String.valueOf(selectedAppointmentToModify.getAppointmentType()));
        modifyAppointmentDescriptionTxt.setText(String.valueOf(selectedAppointmentToModify.getAppointmentDescription()));
        modifyAppointmentLocationTxt.setText(String.valueOf(selectedAppointmentToModify.getAppointmentLocation()));
        modifyAppointmentStartDate.setValue(selectedAppointmentToModify.getStart().toLocalDate());
        modifyAppointmentStartTime.setValue(selectedAppointmentToModify.getStart().toLocalTime());
        modifyAppointmentEndDate.setValue(selectedAppointmentToModify.getEnd().toLocalDate());
        modifyAppointmentEndTime.setValue(selectedAppointmentToModify.getEnd().toLocalTime());
        modifyAppointmentCustomerID.setValue(selectedAppointmentToModify.getCustomerId());
        modifyAppointmentUserID.setValue(selectedAppointmentToModify.getUserId());

        for (Contacts contactName : allContactsObservableList) {
            if (selectedAppointmentToModify.getContactId() == contactName.getContactId()) {
                modifyAppointmentContact.setValue(contactName);
            }
        }


        try {
            modifyAppointmentCustomerID.setItems(CustomersConnection.getAllCustomerIds());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            modifyAppointmentUserID.setItems(UsersConnection.getAllUserIds());
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {

            modifyAppointmentContact.setItems(ContactsConnection.getAllContacts());
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /**
     * This method cancels the modify-appointment process and brings the user back to the appointments screen
     */

    @FXML
    void onActionCancelModifyAppointment(ActionEvent event) throws IOException {
        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /**
     * This method saves the modified appointment's data and adds it to the database and appointments tableview
     */

    @FXML
    void onActionSaveModifiedAppointment(ActionEvent event) throws IOException, SQLException {
        ObservableList<Appointments> allAppsForModify = FXCollections.observableArrayList();
        allAppsForModify = AppointmentsConnection.getAllAppointments();

        int appointmentId = Integer.parseInt(String.valueOf(modifyAppointmentIDTxt.getText()));
        String appointmentTitle = modifyAppointmentTitleTxt.getText();
        String appointmentType = modifyAppointmentTypeTxt.getText();
        String appointmentDescription = modifyAppointmentDescriptionTxt.getText();
        String appointmentLocation = modifyAppointmentLocationTxt.getText();
        LocalDate startDate = modifyAppointmentStartDate.getValue();
        LocalTime startTime = modifyAppointmentStartTime.getValue();
        LocalDate endDate = modifyAppointmentEndDate.getValue();
        LocalTime endTime = modifyAppointmentEndTime.getValue();
        int customerId = modifyAppointmentCustomerID.getSelectionModel().getSelectedItem();
        int userId = modifyAppointmentUserID.getSelectionModel().getSelectedItem();
        int contactId = Integer.parseInt(String.valueOf(modifyAppointmentContact.getSelectionModel().getSelectedItem().getContactId()));

        LocalDateTime startDateTime = LocalDateTime.of(startDate, startTime);
        LocalDateTime endDateTime = LocalDateTime.of(endDate, endTime);

        for (Appointments oldApp : allAppsForModify) {
            LocalDateTime oldAppStart = oldApp.getStart();
            LocalDateTime oldAppEnd = oldApp.getEnd();

            /** This section of code(206-240) performs logical error checks to ensure that the modified appointment is scheduled during business hours and does not overlap other appointments */

            if (oldApp.getAppointmentId() != selectedAppointmentToModify.getAppointmentId()) {
                String appStartDate = String.valueOf((startDateTime.toLocalDate().getDayOfWeek()));

                if (appStartDate == "SATURDAY" || appStartDate == "SUNDAY") {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment is scheduled for the weekend. Our business does not operate during the weekend. Please select a different day.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;
                }

                if ((startDateTime.isAfter(oldAppStart) || startDateTime.isEqual(oldAppStart)) && (startDateTime.isBefore(oldAppEnd) || startDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment starts during one of your other appointments. Please select a different start time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }

                if ((endDateTime.isAfter(oldAppStart)) && (endDateTime.isBefore(oldAppEnd) || endDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment ends during one of your other appointments.Please select a different end time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }

                if ((startDateTime.isBefore(oldAppStart) || startDateTime.isEqual(oldAppStart)) && (endDateTime.isAfter(oldAppEnd) || endDateTime.isEqual(oldAppEnd))) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Your new appointment duration completely overlaps one of your other appointments. Please select a different start and end time.");

                    Optional<ButtonType> result = alert.showAndWait();
                    return;

                }
            }
        }

        int rowsAffected = AppointmentsConnection.updateAppointment(appointmentId, appointmentTitle, appointmentDescription, appointmentLocation, appointmentType,
                startDateTime, endDateTime, customerId, userId, contactId);

        if (rowsAffected > 0) {
            System.out.println("Appointment updated successfully");
        }

        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /**
     * This method initializes the modify-appointment screen
     */

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<LocalTime> modifyAppointmentStartTimes = FXCollections.observableArrayList();
        ObservableList<LocalTime> modifyAppointmentEndTimes = FXCollections.observableArrayList();
        ZoneId userZone = ZoneId.systemDefault();

        /** This section of code(268-354) determines the user's ZoneId and sets start/end time combo-boxes to times that the business is open in their timezone*/

        if (Objects.equals(String.valueOf(userZone), "America/New_York")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(8, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(21, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(8, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(22, 0));

            ZonedDateTime userStart = firstStartTime.atZone(ZoneId.of("America/New_York"));
            ZonedDateTime eastLDT = userStart.withZoneSameInstant(ZoneId.systemDefault());
            LocalTime eastStart = LocalTime.of(eastLDT.getHour(), eastLDT.getMinute());

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                modifyAppointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                modifyAppointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            modifyAppointmentStartTime.setItems(modifyAppointmentStartTimes);
            modifyAppointmentEndTime.setItems(modifyAppointmentEndTimes);
        }


        if (Objects.equals(String.valueOf(userZone), "America/Los_Angeles")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(5, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(18, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(5, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(18, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                modifyAppointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                modifyAppointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            modifyAppointmentStartTime.setItems(modifyAppointmentStartTimes);
            modifyAppointmentEndTime.setItems(modifyAppointmentEndTimes);
        }

        if (Objects.equals(String.valueOf(userZone), "America/Denver")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(6, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(19, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(6, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(19, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                modifyAppointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                modifyAppointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            modifyAppointmentStartTime.setItems(modifyAppointmentStartTimes);
            modifyAppointmentEndTime.setItems(modifyAppointmentEndTimes);
        }

        if (Objects.equals(String.valueOf(userZone), "America/Chicago")) {
            LocalDateTime firstStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(7, 0));
            LocalDateTime lastStartTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(20, 45));
            LocalDateTime firstEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(7, 15));
            LocalDateTime lastEndTime = LocalDateTime.of(LocalDate.now(), LocalTime.of(20, 0));

            while (firstStartTime.isBefore(lastStartTime.plusSeconds(1))) {
                modifyAppointmentStartTimes.add(firstStartTime.toLocalTime());
                firstStartTime = firstStartTime.plusMinutes(15);
            }

            while (firstEndTime.isBefore(lastEndTime.plusSeconds(1))) {
                modifyAppointmentEndTimes.add(firstEndTime.toLocalTime());
                firstEndTime = firstEndTime.plusMinutes(15);
            }

            modifyAppointmentStartTime.setItems(modifyAppointmentStartTimes);
            modifyAppointmentEndTime.setItems(modifyAppointmentEndTimes);

        }
    }
}
