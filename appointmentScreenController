package controller;

import DAO.AppointmentsConnection;
import DAO.CustomersConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Appointments;
import model.Customers;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Optional;

import static DAO.CustomersConnection.deleteCustomer;
import static javafx.fxml.FXMLLoader.load;

/** This class is the controller for the main appointments screen. This screen is where all appointments and all customers are available via table-views */

public class appointmentScreenController {

    Stage stage;
    Parent scene;

    @FXML
    private RadioButton allAppointmentsRbtn;

    @FXML
    private TableView<Customers> appointmentsCustomersTV;

    @FXML
    private TableView<Appointments> appointmentsTV;

    @FXML
    private TableColumn<?, ?> appointmentsTVContact;

    @FXML
    private TableColumn<?, ?> appointmentsTVCustomer;

    @FXML
    private TableColumn<?, ?> appointmentsTVDes;

    @FXML
    private TableColumn<?, ?> appointmentsTVEnd;

    @FXML
    private TableColumn<?, ?> appointmentsTVID;

    @FXML
    private TableColumn<?, ?> appointmentsTVLocation;

    @FXML
    private TableColumn<?, ?> appointmentsTVStart;

    @FXML
    private TableColumn<?, ?> appointmentsTVTitle;

    @FXML
    private TableColumn<?, ?> appointmentsTVType;

    @FXML
    private TableColumn<?, ?> appointmentsTVUser;

    @FXML
    private TableColumn<?, ?> customerTVAddress;

    @FXML
    private TableColumn<?, ?> customerTVName;

    @FXML
    private TableColumn<?, ?> customersTVContact;

    @FXML
    private TableColumn<?, ?> customersTVID;

    @FXML
    private TableColumn<?, ?> customersTVPostal;

    @FXML
    private TableColumn<?, ?> customersTVState;

    /** This method displays all appointments in the appointments tableview */

    @FXML
    void onActionDisplayAllAppointments(ActionEvent event) throws SQLException {
        ObservableList<Appointments> allAppointments3 = FXCollections.observableArrayList();
        allAppointments3 = AppointmentsConnection.getAllAppointments();
        appointmentsTV.setItems(allAppointments3);
    }

    /** This method changes the appointments tableview to where only appointments scheduled for this month are displayed when the user selects the "This month" radio button */

    @FXML
    void onActionDisplayThisMonthsAppointments(ActionEvent event) throws SQLException {
        ObservableList<Appointments> allAppointments1 = FXCollections.observableArrayList();
        ObservableList<Appointments> thisMonthsAppointments = FXCollections.observableArrayList();
        allAppointments1 = AppointmentsConnection.getAllAppointments();

        LocalDateTime thisMonthsAppointmentsStart = LocalDateTime.now().minusMonths(1);
        LocalDateTime thisMonthsAppointmentsEnd = LocalDateTime.now().plusMonths(1);

        if (allAppointments1.size() > 0) {
            for (Appointments a : allAppointments1) {
                if (a.getStart().isBefore(thisMonthsAppointmentsEnd) && a.getStart().isAfter(thisMonthsAppointmentsStart)) {
                    thisMonthsAppointments.add(a);
                }
            }
            appointmentsTV.setItems(thisMonthsAppointments);
        }
    }

    /** This method changes the appointments tableview to where only appointments scheduled for this week are displayed when the user selects the "This week" radio button */

    @FXML
    void onActionDisplayThisWeeksAppointments(ActionEvent event) throws SQLException {
        ObservableList<Appointments> allAppointments2 = FXCollections.observableArrayList();
        ObservableList<Appointments> thisWeeksAppointments = FXCollections.observableArrayList();
        allAppointments2 = AppointmentsConnection.getAllAppointments();

        LocalDateTime thisWeeksAppointmentsStart = LocalDateTime.now().minusWeeks(1);
        LocalDateTime thisWeeksAppointmentsEnd = LocalDateTime.now().plusWeeks(1);

        if (allAppointments2.size() > 0) {
            for (Appointments a : allAppointments2) {
                if (a.getStart().isBefore(thisWeeksAppointmentsEnd) && a.getStart().isAfter(thisWeeksAppointmentsStart)) {
                    thisWeeksAppointments.add(a);
                }
            }

        }
        appointmentsTV.setItems(thisWeeksAppointments);
    }

    /** This method brings the user to the add-appointment screen where they can add a new appointment to the database and tableview */

    @FXML
    void onActionAddAppointment(ActionEvent event) throws IOException {
        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/addAppointmentScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method brings the user to the add-customer screen where they can add a new customer to the database and tableview */

    @FXML
    void onActionAddCustomer(ActionEvent event) throws IOException {
        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/addCustomerScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method brings the user to the modify-appointment screen where they can change attributes associated with the appointment object they selected */

    @FXML
    void onActionUpdateAppointment(ActionEvent event) throws IOException, SQLException {
        ObservableList<Appointments> selectedRows = appointmentsTV.getSelectionModel().getSelectedItems();

        if(selectedRows.isEmpty()){

            Alert alert = new Alert(Alert.AlertType.ERROR, "You must select an appointment to update.");

            Optional<ButtonType> result = alert.showAndWait();

        }

        else {

            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/view/modifyAppointmentScreen.fxml"));
            loader.load();
            modifyAppointmentScreenController MASController = loader.getController();
            MASController.sendSelectedAppointmentToModify(appointmentsTV.getSelectionModel().getSelectedItem());

            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent scene = loader.getRoot();
            stage.setScene(new Scene(scene));
            stage.show();

        }

    }

    /** This method brings the user to the modify-customer screen where they can change attributes associated with the customer object they selected */

    @FXML
    void onActionUpdateCustomer(ActionEvent event) throws IOException, SQLException {
        Customers selectedRows = appointmentsCustomersTV.getSelectionModel().getSelectedItem();

        if(selectedRows == null){

            Alert alert = new Alert(Alert.AlertType.ERROR, "You must select a customer to update.");

            Optional<ButtonType> result = alert.showAndWait();

        }

        else {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/view/modifyCustomerScreen.fxml"));
            loader.load();

            modifyCustomerScreenController ASController = loader.getController();
            ASController.sendSelectedCustomerToModify(appointmentsCustomersTV.getSelectionModel().getSelectedItem());

            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent scene = loader.getRoot();
            stage.setScene(new Scene(scene));
            stage.show();
        }

    }

    /** This method brings the user to the reports screen */

    @FXML
    void onActionOpenReports(ActionEvent event) throws IOException {
        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/reportsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method brings the user back to the login screen */

    public void onActionExitAppointments(ActionEvent actionEvent) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to exit this amazing program?");

        Optional<ButtonType> result = alert.showAndWait();

        if ((result.isPresent()) && result.get() == ButtonType.OK) {

            System.exit(0);

        }

    }

    /** This method allows the user to delete an appointment from the database and appointments tableview */

    @FXML
    void onActionDeleteAppointment(ActionEvent event) throws IOException, SQLException {
        ObservableList<Appointments> selectedRows, allAppointments;
        allAppointments = appointmentsTV.getItems();
        selectedRows = appointmentsTV.getSelectionModel().getSelectedItems();

        if(selectedRows.isEmpty()){

            Alert alert = new Alert(Alert.AlertType.ERROR, "You must select an appointment to delete.");

            Optional<ButtonType> result = alert.showAndWait();

        }

        else {

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to delete this appointment?");

            Optional<ButtonType> result = alert.showAndWait();

            if ((result.isPresent()) && result.get() == ButtonType.OK) {

                for (Appointments appointment : selectedRows) {
                    int appID = appointment.getAppointmentId();
                    String appType = appointment.getAppointmentType();
                    Alert alert5 = new Alert(Alert.AlertType.CONFIRMATION, "Successfully removed appointment! AppointmentID: " + appID + " Appointment Type: " + appType);
                    Optional<ButtonType> result5 = alert5.showAndWait();
                    allAppointments.remove(appointment);
                    AppointmentsConnection.deleteAppointment(appointment.getAppointmentId());
                }
            }
        }

    }

    /** This method allows the user to delete a customer from the database and customer tableview */

    @FXML
    void onActionDeleteCustomer(ActionEvent event) throws IOException, SQLException {
        ObservableList<Customers> selectedRows, allCustomers;
        allCustomers = appointmentsCustomersTV.getItems();
        selectedRows = appointmentsCustomersTV.getSelectionModel().getSelectedItems();

        System.out.println(selectedRows);
        if(selectedRows.isEmpty()){

            Alert alert = new Alert(Alert.AlertType.ERROR, "You must select a customer to delete.");

            Optional<ButtonType> result = alert.showAndWait();

        }

        else {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to delete this customer? All associated appointments will also be deleted!");

            Optional<ButtonType> result = alert.showAndWait();

            if ((result.isPresent()) && result.get() == ButtonType.OK) {
                int deletedCustomerId = appointmentsCustomersTV.getSelectionModel().getSelectedItem().getCustomerId();
                Alert alert7 = new Alert(Alert.AlertType.CONFIRMATION, "Customer deleted successfully!");

                Optional<ButtonType> result7 = alert7.showAndWait();

                try {
                    deleteCustomer(deletedCustomerId);
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                for (Customers customer : selectedRows) {
                    allCustomers.remove(customer);
                }
            }
        }
    }

    /** This method initializes the appointments screen */

    public void initialize() throws SQLException {
        ObservableList<Appointments> allAppointmentsList = AppointmentsConnection.getAllAppointments();
        ObservableList<Customers> allCustomersList = CustomersConnection.getAllCustomers();

        allAppointmentsRbtn.setSelected(true);

        appointmentsTVID.setCellValueFactory(new PropertyValueFactory<>("appointmentId"));
        appointmentsTVTitle.setCellValueFactory(new PropertyValueFactory<>("appointmentTitle"));
        appointmentsTVType.setCellValueFactory(new PropertyValueFactory<>("appointmentType"));
        appointmentsTVDes.setCellValueFactory(new PropertyValueFactory<>("appointmentDescription"));
        appointmentsTVLocation.setCellValueFactory(new PropertyValueFactory<>("appointmentLocation"));
        appointmentsTVStart.setCellValueFactory(new PropertyValueFactory<>("start"));
        appointmentsTVEnd.setCellValueFactory(new PropertyValueFactory<>("end"));
        appointmentsTVContact.setCellValueFactory(new PropertyValueFactory<>("contactId"));
        appointmentsTVCustomer.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        appointmentsTVUser.setCellValueFactory(new PropertyValueFactory<>("userId"));

        if (allAppointmentsRbtn.isSelected()) {
            appointmentsTV.setItems(allAppointmentsList);
        }

        customersTVID.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        customerTVName.setCellValueFactory(new PropertyValueFactory<>("customerName"));
        customerTVAddress.setCellValueFactory(new PropertyValueFactory<>("customerAddress"));
        customersTVContact.setCellValueFactory(new PropertyValueFactory<>("customerNumber"));
        customersTVState.setCellValueFactory(new PropertyValueFactory<>("customerDivisionId"));
        customersTVPostal.setCellValueFactory(new PropertyValueFactory<>("customerPostalCode"));


        appointmentsCustomersTV.setItems(allCustomersList);

    }
}
