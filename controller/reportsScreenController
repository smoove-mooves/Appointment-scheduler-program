package controller;

import DAO.AppointmentsConnection;
import DAO.ContactsConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.*;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;

import static javafx.fxml.FXMLLoader.load;

/** This class is the controller for the reports screen */

public class reportsScreenController implements Initializable {

    Stage stage;
    Parent scene;

    @FXML
    private ComboBox<String> reportsMonthComboBox;

    @FXML
    private ComboBox<String> reportsTypeComboBox;

    @FXML
    private TextField reportsMonthAndTypeTxt;

    @FXML
    private ComboBox<Contacts> reportsSelectContact;

    @FXML
    private TableColumn<?, ?> reportsTopTVColumn;

    @FXML
    private TableColumn<?, ?> reportsTopTVCustomer;

    @FXML
    private TableColumn<?, ?> reportsTopTVDescription;

    @FXML
    private TableColumn<?, ?> reportsTopTVEnd;

    @FXML
    private TableColumn<?, ?> reportsTopTVLocation;

    @FXML
    private TableColumn<?, ?> reportsTopTVStart;

    @FXML
    private TableColumn<?, ?> reportsTopTVTitle;

    @FXML
    private TableColumn<?, ?> reportsTopTVType;

    @FXML
    private TableView<Appointments> reportsTop;

    @FXML
    void onActionSelectReportMonth (ActionEvent event){
    }

    @FXML
    void onActionSelectReportType (ActionEvent event) throws SQLException {

    }

    @FXML
    void onActionDisplayTotal (ActionEvent event){

    }

    /** This method calculates the total reports for an appointment month and type pair */

    @FXML
    void onActionCalculateTotal (ActionEvent event) throws SQLException {
        ObservableList<Appointments> allAppsForReports = FXCollections.observableArrayList();
        allAppsForReports = AppointmentsConnection.getAllAppointments();
        int total = 0;

        /** First lambda expression */

        reportInterface totals = n -> n + 1;

                for(Appointments type : allAppsForReports){
                    String appMonth = String.valueOf(type.getStart().getMonth());
                    String reportMonth = reportsMonthComboBox.getSelectionModel().getSelectedItem();
                    String appType = type.getAppointmentType();
                    String reportType = reportsTypeComboBox.getSelectionModel().getSelectedItem();

                    if(Objects.equals(appType, reportType) && Objects.equals(appMonth, reportMonth)){
                        total = totals.incrementTotalReports(total);

                    }
                }
        reportsMonthAndTypeTxt.setText(String.valueOf(total));
    }

    /** This method filters appointments by contact when the user interacts with the combo-box located at the top of the screen */

    @FXML
    void onActionSelectContact(ActionEvent event) {
        Contacts selectedContact = reportsSelectContact.getSelectionModel().getSelectedItem();

        if(selectedContact.contactId == 1){

            try {
                reportsTop.setItems(AppointmentsConnection.getAnikasReports());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        if(selectedContact.contactId == 2){

            try {
                reportsTop.setItems(AppointmentsConnection.getDanielsReports());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        if(selectedContact.contactId == 3){

            try {
                reportsTop.setItems(AppointmentsConnection.getLisReports());
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    /** This method gives the user the ability to close the program from the reports screen */

    @FXML
    void onActionCancelReports(ActionEvent event) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to exit this amazing program?");

        Optional<ButtonType> result = alert.showAndWait();

        if ((result.isPresent()) && result.get() == ButtonType.OK) {

            System.exit(0);

        }

    }

    /** This method lets the user exit the reports screen to go back to the appointments screen */

    @FXML
    void onActionExitReports(ActionEvent event) throws IOException {
        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = load(getClass().getResource("/view/appointmentsScreen.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();

    }

    /** This method initializes the reports screen */

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<Appointments> allAppointmentsForReports = FXCollections.observableArrayList();
        ObservableList<String> allAppointmentMonths = FXCollections.observableArrayList();
        ObservableList<String> allAppointmentTypes = FXCollections.observableArrayList();

        allAppointmentMonths.add("JANUARY");
        allAppointmentMonths.add("FEBRUARY");
        allAppointmentMonths.add("MARCH");
        allAppointmentMonths.add("APRIL");
        allAppointmentMonths.add("MAY");
        allAppointmentMonths.add("JUNE");
        allAppointmentMonths.add("JULY");
        allAppointmentMonths.add("AUGUST");
        allAppointmentMonths.add("SEPTEMBER");
        allAppointmentMonths.add("OCTOBER");
        allAppointmentMonths.add("NOVEMBER");
        allAppointmentMonths.add("DECEMBER");

        try {
            allAppointmentTypes = AppointmentsConnection.getAllAppointmentTypes();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        reportsMonthComboBox.setItems(allAppointmentMonths);
        reportsTypeComboBox.setItems(allAppointmentTypes);

        reportsTopTVColumn.setCellValueFactory(new PropertyValueFactory<>("appointmentId"));
        reportsTopTVTitle.setCellValueFactory(new PropertyValueFactory<>("appointmentTitle"));
        reportsTopTVType.setCellValueFactory(new PropertyValueFactory<>("appointmentType"));
        reportsTopTVDescription.setCellValueFactory(new PropertyValueFactory<>("appointmentDescription"));
        reportsTopTVLocation.setCellValueFactory(new PropertyValueFactory<>("appointmentLocation"));
        reportsTopTVStart.setCellValueFactory(new PropertyValueFactory<>("start"));
        reportsTopTVEnd.setCellValueFactory(new PropertyValueFactory<>("end"));
        reportsTopTVCustomer.setCellValueFactory(new PropertyValueFactory<>("customerId"));

        try {
            reportsSelectContact.setItems(ContactsConnection.getAllContacts());
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

}
